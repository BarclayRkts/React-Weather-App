{"version":3,"sources":["Display.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["Display","className","this","props","name","country","temp","Component","Weather","state","iteams","city","isLoaded","error","handleSubmit","bind","handleChange","evt","preventDefault","url","key","console","log","fetch","then","res","json","data","setState","catch","err","message","alert","target","value","Fragment","classname","onSubmit","onChange","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAeeA,G,mLAVP,OACI,6BACI,yBAAKC,UAAU,aACX,0BAAMA,UAAU,YAAYC,KAAKC,MAAMC,KAAvC,KAA+CF,KAAKC,MAAME,SAC1D,0BAAMJ,UAAU,aAAaC,KAAKC,MAAMG,KAAxC,gB,GANEC,cC0EPC,E,kDAxEX,WAAYL,GAAO,IAAD,8BACd,cAAMA,IACDM,MAAQ,CACTC,OAAQ,GACRC,KAAM,GACNC,UAAU,EACVN,KAAM,OACNF,KAAM,UACNS,MAAO,GACPR,QAAS,OAEb,EAAKS,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAZN,E,yDAcLE,GAAK,IAAD,OACbA,EAAIC,iBAGJ,IAAIC,EAAM,qDACNC,EAAM,yDACNC,QAAQC,IAAR,UAAeH,GAAf,OAAqBjB,KAAKO,MAAME,MAAhC,OAAuCS,IACvCG,MAAM,GAAD,OACEJ,GADF,OACQjB,KAAKO,MAAME,MADnB,OAC0BS,IAG9BI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFN,QAAQC,IAAIK,EAAI,KAAJ,MACZ,EAAKC,SAAS,CACVlB,OAAQiB,EACRf,UAAU,EACVN,KAAMqB,EAAI,KAAJ,KACNvB,KAAMuB,EAAI,KACVtB,QAASsB,EAAI,IAAJ,UAEbN,QAAQC,IAAI,EAAKb,MAAMC,WAE1BmB,OAAM,SAAAC,GACHT,QAAQC,IAAIQ,EAAIC,SAChBC,MAAM,YAAD,OAAa,EAAKvB,MAAME,KAAxB,uBAETT,KAAK0B,SAAS,CACVjB,KAAM,O,4EAGKM,G,wEACnBA,EAAIC,iB,SACEhB,KAAK0B,SAAS,CAChBjB,KAAMM,EAAIgB,OAAOC,Q,OAErBb,QAAQC,IAAIpB,KAAKO,MAAME,M,sIAIvB,OACI,kBAAC,IAAMwB,SAAP,CAAgBC,UAAU,OACtB,0BAAMA,UAAU,YAAYC,SAAUnC,KAAKY,cACvC,2BACIb,UAAU,WACViC,MAAOhC,KAAKO,MAAME,KAClB2B,SAAUpC,KAAKc,aACfZ,KAAK,OACLmC,KAAK,SAET,+CACA,kBAAC,EAAD,CAASnC,KAAMF,KAAKO,MAAML,KAAME,KAAMJ,KAAKO,MAAMH,KAAMD,QAASH,KAAKO,MAAMJ,gB,GAlEzEE,a,MCSPiC,MATf,WACE,OACE,yBAAKvC,UAAU,OACb,wBAAIA,UAAU,SAAd,eACA,kBAAC,EAAD,QCIcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAhB,GACLQ,QAAQR,MAAMA,EAAMkB,c","file":"static/js/main.58a532ac.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Display.css';\r\n\r\nclass Display extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='container'>\r\n                    <span className='data two'>{this.props.name}, {this.props.country}</span>\r\n                    <span className='data temp'>{this.props.temp} Â°F</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Display;","import React, { Component } from 'react';\r\nimport './Input.css';\r\nimport Display from './Display';\r\n\r\nclass Weather extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            iteams: '',\r\n            city: '',\r\n            isLoaded: false,\r\n            temp: '87.2',\r\n            name: 'Houston',\r\n            error: '',\r\n            country: ' US'\r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        // alert('inside submit');\r\n        // console.log(this.state.city)\r\n        let url = 'https://api.openweathermap.org/data/2.5/weather?q='\r\n        let key = '&units=imperial&appid=0509a85eeb71ef944d4a6d16ac70b2bf'\r\n            console.log(`${url}${this.state.city}${key}`);\r\n            fetch(\r\n                `${url}${this.state.city}${key}`\r\n                // `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&units=imperial&appid=0509a85eeb71ef944d4a6d16ac70b2bf`\r\n            )\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data['main']['temp']);\r\n                this.setState({\r\n                    iteams: data,\r\n                    isLoaded: true,\r\n                    temp: data['main']['temp'],\r\n                    name: data['name'],\r\n                    country: data['sys']['country']\r\n                })\r\n                console.log(this.state.iteams);\r\n            })\r\n            .catch(err => {\r\n                console.log(err.message);\r\n                alert(`The city ${this.state.city} does not exist`);\r\n            });     \r\n            this.setState({\r\n                city: ''\r\n            })\r\n        }\r\n        async handleChange(evt){\r\n        evt.preventDefault();\r\n        await this.setState({\r\n            city: evt.target.value\r\n        })\r\n        console.log(this.state.city);\r\n        // this.handleSubmit();\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment classname='con'>\r\n                <form classname='container' onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        className='inputBox'\r\n                        value={this.state.city}\r\n                        onChange={this.handleChange}\r\n                        name='city'\r\n                        type='text'\r\n                    />\r\n                    <button >Get Weather</button>\r\n                    <Display name={this.state.name} temp={this.state.temp} country={this.state.country}></Display>\r\n                </form>\r\n                \r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\nexport default Weather;","import React from 'react';\nimport Input from './Input';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className='title'>Weather App</h1>\n      <Input/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}